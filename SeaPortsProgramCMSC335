/**
 *Stephen Hamilton
 *Class: CMSC 335
 *Section: 7981
 *Instructor: Dinsoreanu, Mihaela
 *Assignment: Project 3 Sea Port
 * Purpose: The purpose of this project is to
 * allow the user to Create a thread for each job,
 * and to create a GUI to show the
 * progress of each job.
 *
 *Date Started: 11/18/2018
 *Due Date: 12/02/2018
 */


import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.swing.tree.TreeSelectionModel;
import java.util.HashMap;
import javax.swing.tree.DefaultTreeModel;
import java.awt.event.ActionEvent;
import java.io.FileReader;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFileChooser;



final class SeaPortsProgramCMSC335 extends JFrame {
     //I HAD TO ADD MUCH MUCH MORE TO THE GUI IN ORDER TO ACCOMPLISH ANYTHING 
    //WITH PROJECT 3 and 4
    //EXPANDED UPON THE GUI FOR PROJECTS 3, 4
    //This creates an instance of world in parent class
    WorldCMSC335 world;
    //title variable for title of program window
    String title;
    //int data type variable for width of program window
    int width;
    //int data type variable for height of program window
    int height;
    //Variable Declarations
    // ALL OF THESE FIELDS ARE EXPANDED UPON FROM PROJ 1 and 2 TO MAKE 3 and 4
    //GUI FIELDS
    //main frame is the frame of the program
    JFrame mainFrame;
    //This field if for the JTree within the program
    JTree mainJTree;
    //All areas for text. An area of text for searched info, an area for job status
    //and an area for job pool
    JTextArea searchArea, statusArea, jobsArea;
    //Scroll panes for all areas were text appears so user can scroll through info
    //that appears in area for text
    JScrollPane treePane, searchPane, jobsPane,
            statusPane, poolPane;
    //The various panels to hold the various GUI Components
    JPanel mainPanel, optPanel, wPanel, tPanel, tButPanel, jPanel,
            jobsScroll, logsPanel;
    //JButton holds all buttons added to program thus far
    //Read Button variable to read in file
    //Sort buttton variable to sort through the information in the file.
    //Search BUtton variable to search for "Things" in file
    JButton dataButton, rdButton,
            srtButton, schButton;
    //This is the label for the search text field
    JLabel schLabel, srtLabel;
    //text field in which the user can input information to search
    JTextField schField;
    //String array to hold values for different combo boxes
    //each combo box stores objects converted to strings
    //for the user to slect between different ship parameters, person jobs / names, ports,  etc...
    //The user can even select options to sort through information
    String[] schBoxValues, srtBoxValues, trgBoxValues,
            tyBoxValues;
    //These are the combo box fields for each individual combobox
    JComboBox<String> schComboBox, srtComboBox, trgComboBox,
            tyComboBox;
    // the JFileeChooser allows the user to select any file for use in the program
    JFileChooser chooser;
    //The scanner is used to parse information in the file
    Scanner scanIn;
    // File is Used to obtain desired file for file chooser code and potion of program
    File selFileInput;
    //hashShip variable created in  initialization of hash map
    
    //String List for combo box selections in the form of variables used.
   
    
    

    //Constructor

    protected SeaPortsProgramCMSC335() {
        //Setting the size, title and clode operation of the program window
        //This code is handled first in the GUI for the window
        super("Sea Ports Program CMSC335");
        
        this.setTitle("Sea Ports Program CMSC335");
        //Setting size of the window
        this.setWidth(1280);
        
        this.setHeight(720);
        //setting close operation of the window
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //setting the window to be visible
        setVisible(true);

    }

    
    

    //SETTERS AND GETTERS EVERYBODY!
    //Constructor holding parameters
    protected SeaPortsProgramCMSC335(String title, int width, int height) {
        super(title);
        //setter window title
        this.setTitle(title);
        //setter window width
        this.setWidth(width);
        //setter window height
        this.setHeight(height);
    }

    //title setter
    @Override
    public void setTitle(String title) {
        this.title = title;
    }

    //width setter
    public void setWidth(int width) {
        //width of window
        this.width = 1280;
        this.width = width;
    }

    //height setter
    public void setHeight(int height) {
        //height of window
        this.height = 720;
        this.height = height;

    }

    //title getter
    @Override
    public String getTitle() {
        //returning the title
        return this.title;
    }

    //width getter
    @Override
    public int getWidth() {
        //returning the width
        return this.width;
    }

    //height getter
    @Override
    public int getHeight() {
        //returning the height
        return this.height;
    }

     private void constructGUI() {

        //creates border layout for main panel
        this.mainPanel = new JPanel(new BorderLayout());
        //creates grid lay out for options panel
        this.optPanel = new JPanel(new GridLayout(1, 10, 5, 5));
        //creates grid layout for world panel
        this.wPanel = new JPanel(new GridLayout(2, 1, 5, 5));
        // creates border lay out for tree panel
        this.tPanel = new JPanel(new BorderLayout());
        // creates grid layout for tree buttons panel
        this.tButPanel = new JPanel(new GridLayout(1, 3, 10, 10));
        // creates grid layout for jobs panel
        this.jPanel = new JPanel(new GridLayout(2, 1, 5, 5));
        // creates grid  lay out for jobs scroll pane
        this.jobsScroll = new JPanel(new GridLayout(0, 1));
        // creates a grid lay out for threads panel
        this.logsPanel = new JPanel(new GridLayout(1, 2, 5, 5));

        // These are the buttons for the options menu
        //read button
        this.rdButton = new JButton("Read in File");
        //search button
        this.schButton = new JButton("Search in File");
        //sort 
        this.srtButton = new JButton("Sort Through File");

        // creates the search field
        this.schField = new JTextField("", 10);
        //creates the label for the search field
        this.schLabel = new JLabel("Search Information:", JLabel.RIGHT);

        // creates the sort label
        this.srtLabel = new JLabel("Sort Information:", JLabel.RIGHT);

        //creating Strings for the values for the sort combo box
        this.srtBoxValues = new String[]{
            "All ports",
           
        };
        //creating new combo box for sorting with assigned sort values
        this.srtComboBox = new JComboBox<>(this.srtBoxValues);
        //creating Strings for the values for the search combo box
        this.schBoxValues = new String[]{
            //String Value for name of person, port, ship
            "Person / Port / Ship",
            //String value for index number that belongs to 
            //ship person port dock
            "Number Of Index",
            //String value for the skill set of person
            "Skill Of Person"
        };
        //creating new combo box for searching with assigned search values
        this.schComboBox = new JComboBox<>(this.schBoxValues);
        //creating Strings for the values for the target combo box
        this.trgBoxValues = new String[]{
            //String value for search target Que
            "Que",
              //String value for search target Ships
            "Ships",
              //String value for search target Docks
            "Docks",
              //String value for search target Persons
            "Persons",
              //String value for search target Jobs
            "Jobs"
        };
        //Creating combo box for targets with assigned target values
        this.trgComboBox = new JComboBox<>(this.trgBoxValues);
        //creating Strings for the values for the type combo box
        this.tyBoxValues = new String[]{
            //String value for type name
            "name",
            //String value for type totalWeight
            "totalWeight",
            //String value for type hullLength
            "hullLength",
            //String value for type hullWidth
            "hullWidth",
            //String value for type depthDraft
            "depthDraft"
        };

      //Creating combo box for types with assigned type values
        this.tyComboBox = new JComboBox<>(this.tyBoxValues);

        //adding all of the buttons to the options panel
        //adding read button
        this.optPanel.add(this.rdButton);
        //adding search label
        this.optPanel.add(this.schLabel);
        //adding search field
        this.optPanel.add(this.schField);
        //adding the search combo box
        this.optPanel.add(this.schComboBox);
        //adding the search button
        this.optPanel.add(this.schButton);
        //adding the sort label
        this.optPanel.add(this.srtLabel);
        //addin the sort combo box
        this.optPanel.add(this.srtComboBox);
        //adding the target combo box
        this.optPanel.add(this.trgComboBox);
        //adding the type combo box
        this.optPanel.add(this.tyComboBox);
        //adding the sort button
        this.optPanel.add(this.srtButton);

        //creating the JTree Object
        this.mainJTree = new JTree();
        //setting the table model for the Tree
        this.mainJTree.setModel(null);
        //getting selection model instance
        //setting selection mode instance
        this.mainJTree.getSelectionModel().setSelectionMode(
                //current state of selection for the tree component   
                TreeSelectionModel.SINGLE_TREE_SELECTION);

        // adding mainJTree to the scroll pane
        this.treePane = new JScrollPane(this.mainJTree);

        //this button is used to show data in the form of a table
        this.dataButton = new JButton("Data Table");

        
        //This will retrieve data for selection
        this.tButPanel.add(this.dataButton);

        //This is adding the tree with border lay out center
        this.tPanel.add(this.treePane, BorderLayout.CENTER);
        //This is adding the tree button panel with border layout south
        this.tPanel.add(this.tButPanel, BorderLayout.SOUTH);

        //This is creating the text area for search results
        this.searchArea = new JTextArea();
        //This is setting the font to the text area
        this.searchArea.setFont(new Font("Times New Roman", 0, 12));
        //This is to wrap the text for the text area
        this.searchArea.setLineWrap(true);

        //this will add search results to the search area
        this.searchPane = new JScrollPane(this.searchArea);

        //adding the tree panel to workd panel 
        this.wPanel.add(this.tPanel);
        //adding the search pane to the world panel
        this.wPanel.add(this.searchPane);

        //Creating the area for the job status events
        this.statusArea = new JTextArea();
        //setting the font for the status area
        this.statusArea.setFont(new Font("Times New Roman", 0, 11));
        //wrapping the text for the status area
        this.statusArea.setLineWrap(true);

        //creating the jobs area
        this.jobsArea = new JTextArea();
        //setting font for the jobs area
        this.jobsArea.setFont(new Font("Times New Roman", 0, 11));
        ///wrapping the text for the jobs area
        this.jobsArea.setLineWrap(true);

        //adding results text to jobs area
        this.poolPane = new JScrollPane(this.jobsArea);
        //adding status pane to status area
        this.statusPane = new JScrollPane(this.statusArea);
        //adding a scroll pane for jobs area
        this.jobsPane = new JScrollPane(this.jobsScroll);

        //adding the logs panel to status pane
        this.logsPanel.add(this.statusPane);
        //adding the logs panel to the pool pane
        this.logsPanel.add(this.poolPane);
        //adding jobs panel to jobs pane
        this.jPanel.add(this.jobsPane);
        //adding jobs panel to logs panel
        this.jPanel.add(this.logsPanel);

        //On the main panel we want to add the options panel with border lay out north
        this.mainPanel.add(this.optPanel, BorderLayout.NORTH);
        //On the main panel we want to add the world panel with border layout west
        this.mainPanel.add(this.wPanel, BorderLayout.WEST);
        //On the main panel we want to add the jobs panel with border layout center
        this.mainPanel.add(this.jPanel, BorderLayout.CENTER);

        //The whole point of this is to set a border to the areas and to set a title to the areas
        //setter for option panel title and border
        this.optPanel.setBorder(BorderFactory.createTitledBorder("Options"));
        //setter for option panel title and border
        this.tPanel.setBorder(BorderFactory.createTitledBorder("Tree"));
        //setter for option panel title and border
        this.jobsPane.setBorder(BorderFactory.createTitledBorder("Jobs"));
        //setter for option panel title and border
        this.searchPane.setBorder(BorderFactory.createTitledBorder("Searching & Sorting"));
        //setter for option panel title and border
        this.statusPane.setBorder(BorderFactory.createTitledBorder("Job Logs"));
        //setter for option panel title and border
        this.poolPane.setBorder(BorderFactory.createTitledBorder("Job Pool"));
        //setter for option panel title and border
        this.mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        //making border areas of color gray
        //status area border gray
        this.statusArea.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        //jobs area border gray
        this.jobsArea.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        //search area border gray
        this.searchArea.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));

        //setters for white background and gray border for jobs scroll pane
        //setter border gray
        this.jobsScroll.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        //setter background white
        this.jobsScroll.setBackground(Color.WHITE);

        //target combo box action liistener
        this.trgComboBox.addActionListener((ActionEvent e) -> {
            //sorting when button is clicked method
            this.Sorting();
        });

        //read button action listener
        this.rdButton.addActionListener((ActionEvent e) -> {
            //read the file contents when clicked method
            this.readIn();
        });

        //search button action listener
        this.schButton.addActionListener((ActionEvent e) -> {
            //search through world contents when clicked method
            this.searchIn();
        });

        //sort button action listener
        this.srtButton.addActionListener((ActionEvent e) -> {
            //sort through world contents when clicked mehtod
            SeaPortsProgramCMSC335.this.sortWorld();
        });

        //data button action listener
        this.dataButton.addActionListener((ActionEvent e) -> {
            //display the details when clicked method
            this.displayDetails();
        });

        //setting the size, visibility, title etc...
        //getter for JFrame title
        this.mainFrame = new JFrame(this.getTitle());
        //setter for main panel
        this.mainFrame.setContentPane(this.mainPanel);
        //setter for frame size
        this.mainFrame.setSize(this.getWidth(), this.getHeight());
        //setter for frame visible
        this.mainFrame.setVisible(true);
        //seter for close operation to close window when user clicks x
        this.mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
     //Sorting method
    private void Sorting() {
        //removeAllItems method
        this.tyComboBox.removeAllItems();
        //adding name to combo box
        this.tyComboBox.addItem("name");
        //if statement get index for target combo box
        if (this.trgComboBox.getSelectedIndex() == 0) {
            //add totalWeight to type combo box
            this.tyComboBox.addItem("totalWeight");
            //add hullWidth to type combo box
            this.tyComboBox.addItem("hullWidth");
            //add hullLength to type combo box
            this.tyComboBox.addItem("hullLength");
            //add depthDraft to type combo box
            this.tyComboBox.addItem("depthDraft");
        }
    }


    //Sea POrt Sorting Method
    private void SeaPortSorting() {
        //removeAllItems method
        this.srtComboBox.removeAllItems();
        //adding ports to sort combo box
        this.srtComboBox.addItem("All ports");
        //getting Name from Que via colletion sorting
        Collections.sort(this.world.getPorts(), new QueCMSC335("name"));
        //if statement ports size is greater than 1
        if (this.world.getPorts().size() > 1) {
            //for loop seaport gets ports
            this.world.getPorts().forEach((newPort) -> {
                //sort combo box add new port name
                this.srtComboBox.addItem((String) newPort.getName());
            });
        }
    }

    private void readIn() {

       // These are the variable declarations for the file chooser
        int result;
        FileReader fileReader;

        /**
         * I was not sure how to implement a file chooser So, I looked it up,
         * and obtained idea from FileFilter for JFileChooser. (n.d.). Retrieved
         * October 29, 2018, from
         * https://stackoverflow.com/questions/20411919/filefilter-for-jfilechooser
         *
         * Another website used for help was Java Code Examples for
         * javax.swing.filechooser.FileNameExtensionFilter. (n.d.). Retrieved
         * October 29, 2018, from
         * https://www.programcreek.com/java-api-examples/javax.swing.filechooser.FileNameExtensionFilter
         *
         * Below is the JFileChooser Code which enables a user to select a file
         *
         */
        //Code for the file chooser with start file as per rubric
        this.chooser = new JFileChooser(".");
        //int reult used for the open dialog of the JFrame
        result = this.chooser.showOpenDialog(new JFrame());
        //if, try, catch statment for result variable to approve option selected
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                fileReader = new FileReader(this.chooser.getSelectedFile());
                //Scan in file selected
                this.scanIn = new Scanner(fileReader);
            } catch (FileNotFoundException ex) {
                //displays message if user selected incorrect file
                this.displayErrorPopup("\"The File selected is not found. Select another File Please.");
            }
        }

        //All jobs threads stop if from another world
        if (this.world != null) {
            //clear all the jobs if above
            this.clearJobs();
        }
        //Scan in to instance of world
        this.world = new WorldCMSC335(this.scanIn);
    
        //This code stops users from selecting an improper file format
        //if statement .getAllThing().isEmpty() checking is string is empty or not
        if (this.world.getAllThings().isEmpty()) {
            //setter for text to status pane
            this.statusArea.setText("");
            //setter for text to job area
            this.jobsArea.setText("");
            //setter for text to search area
            this.searchArea.setText("");
            //setter for text to Tree null
            this.mainJTree.setModel(null);
            //clear all jobs from area
            this.clearJobs();
            //world set to null
            this.world = null;
            ////display error message when incorrect or corrupt file selected
            this.displayErrorPopup("ERROR: You either selected the incorrect file or the file may be corrupt.");
            //else statement
        } else {
            //setter for text to status area
            this.statusArea.setText("");
            //setter for text to job area
            this.jobsArea.setText("");
            //setter for text to search area
            this.searchArea.setText("");
            //setter model to JTree
            this.mainJTree.setModel(new DefaultTreeModel(this.world.toTree()));
            //sea port sorting  method
            this.SeaPortSorting(); 
            //start all jobs method
            this.Jobs();
        }
    }
    //search in method
    private void searchIn() {
        //Variables declared for the search in method
        String results, search;
        int selection;

        //definitions for variables
        results = "";
        //this gets rid of leading and trailing spaces from text
        //after gettin the text
        search = this.schField.getText().trim();
        //get the selected value of the index
        selection = this.schComboBox.getSelectedIndex();

        // switch case selection
        switch (selection) {
            //name
            case 0:
            //index    
            case 1:
                //assemble the results for the search
                results = this.assemble(selection, search);
                //display the results
                this.display(results, search);
                break;
            //skill
            case 2:
                //for loop get ports
                for (SeaPortCMSC335 port : this.world.getPorts()) {
            //for loop get persons
            //concatenate strings
            results = port.getPersons().stream().filter((person) -> (person.getSkill().equals(search))).map((person) -> "> " + person.getName() + " (id #" + person.getIndex()
                    + ")\n").reduce(results, String::concat); 
           
                }
                //display the results of the search
                this.display(results, search);
                break;
            default:
                break;
        }
    }
    //assemble method
    private String assemble(int index, String target) {

        //Variable declarations and definitions for assemble method
        //method variable
        Method param;
        //string variable
        String strParam, methName;
        //string variable
        String strResult = "";

        //index 0 for name and index
        methName = (index == 0) ? "getName" : "getIndex";
        //try catch
        try {
            //either or for param
            param = ThingCMSC335.class.getDeclaredMethod(methName);
            //for loop get all things from world
            for (ThingCMSC335 item : this.world.getAllThings()) {

                //integer ---> string
                strParam = "" + param.invoke(item);
                //if the parameter is equal to the result get me the target
                if (strParam.equals(target)) {
                    strResult += "> " + item.getName() + " " + item.getIndex() + " ("
                            + item.getClass().getSimpleName() + ")\n";
                }
            }
            //Catching some exceptions
        } catch ( 
                NoSuchMethodException
                | SecurityException
                | IllegalAccessException
                | IllegalArgumentException
                | InvocationTargetException ex) {
            //error print out for exceptions
            System.out.println("Error: " + ex);
        }
        //return that STRING!
        return strResult;
    }

    //display method
    private void display(String strResults, String target) {
        //if statement results equal ""
        if (strResults.equals("")) {
            //append string for search area
            //concatenate string
            this.searchArea.append("ERROR: '" + target + "'your target was not found.\n\n");
            //else statement
        } else {
            //append string for search area
            //concatenante string
            this.searchArea.append("Results'" + target + "'\n"
                    + strResults + "\n");
        }
    }

    //sort world method
    private void sortWorld() {

        //This code stops users from trying to load an incorrect file
        if (this.world == null || this.scanIn == null) {
            //error for incorrect file
            this.displayErrorPopup("Error: Incorrect file. Please select proper file.");
            //return the error
            return;
        }

       //Variable Declarations for sort world method
       //String variables
        String sortPort, sortTarget, sortType, result, fieldMethodName, listMethodName;
        //method variables
        Method getField, getList;
        //ArrayLIst variables
        ArrayList<ThingCMSC335> thingsList, gottenList;
        //HashMap variables
        HashMap<String, String> typeMethodMap, targetMethodMap;

       //hash map for type
        typeMethodMap = new HashMap<String, String>() {{ 
            //get the number of index
            put("name", "getIndex");
            //get the weight
            put("totalWeight", "gettotalWeight");
            //get the length
            put("hullLength", "gethullLength");
            //get the width
            put("hullWidth", "gethullWidth");
            //get the draft
            put("depthDraft", "getdepthDraft");
        }};
        //hash map for target
        targetMethodMap = new HashMap<String, String>() {{
            //get the Que
            put("Que", "getQue");
            //get the Ships
            put("Ships", "getShips");
            //get the Docks
            put("Docks", "getDocks");
            //get the Persons
            put("Persons", "getPersons");
            //get the Ships Jobs
            put("Jobs", "getShips"); 
        }};

        //Variable Definitions for sort workd method
        //port item converted toString
        sortPort = this.srtComboBox.getSelectedItem().toString();
        //target item converted to string
        sortTarget = this.trgComboBox.getSelectedItem().toString();
        //type item converted to string
        sortType = this.tyComboBox.getSelectedItem().toString();
        //field item converted to sttring
        fieldMethodName = typeMethodMap.get(sortType);
        //target item converted to string
        listMethodName = targetMethodMap.get(sortTarget);
        //result string ""
        result = "";
        //create new array list via variable thingsList
        thingsList = new ArrayList<>();
        //Try Catch
        try {
            
            //get list name
            getList = SeaPortCMSC335.class.getDeclaredMethod(listMethodName);
            //if statement either or for Que or Name
            if (sortTarget.equals("Que") && !sortType.equals("name")) {
                //get fieldMethodName
                getField = ShipCMSC335.class.getDeclaredMethod(fieldMethodName);
                //else statement
            } else {
                //get fieldMethodName
                getField = ThingCMSC335.class.getDeclaredMethod(fieldMethodName);
            }
            //if statement for port equals "All ports"
            if (sortPort.equals("All ports")) {
                //All ports in field is entered lowercase
                sortPort = sortPort.toLowerCase();
                //for loop get new port from world
                for (SeaPortCMSC335 newPort : world.getPorts()) {
                    //invoke the new port via gottenList
                    gottenList = (ArrayList<ThingCMSC335>) getList.invoke(newPort);          
                    //add all ports to retrieved list
                    thingsList.addAll(gottenList);
                }
                //else statement
            } else {
                //for loop new port to get ports from world
                for (SeaPortCMSC335 newPort : this.world.getPorts()) {
                   //if statement get name from ports
                    if (newPort.getName().equals(sortPort)) {
                        //invoke the new port
                        gottenList = (ArrayList<ThingCMSC335>) getList.invoke(newPort);
                        //add all ports to gotten list
                        thingsList.addAll(gottenList);
                    }
                }
            }

           //if statement if the target is Jobs
            if (sortTarget.equals("Jobs")) {
                //ArrayList created for Jobs List
                ArrayList<JobCMSC335> jobsList = new ArrayList<>();
                //for loop iterator has next thingsList
                for (Iterator<ThingCMSC335> iterator = thingsList.iterator(); iterator.hasNext();) {
                    //iteration of new ship
                    ShipCMSC335 newShip = (ShipCMSC335) iterator.next();
                    // new job new ships to add new job
                    newShip.getJobs().forEach((newJob) -> {
                        //add new jobs to jobsList
                        jobsList.add(newJob);
                    });
                }
                //remove ship instances
                thingsList.clear(); 
                //replace any with job
                thingsList.addAll(jobsList); 
            }

           //if no results for information found
            //if statement
            if (thingsList.isEmpty()) {
                //string for no results found
                result += ">Results are Empty!.\n";
                //else statement
            } else {
               //collections sort the results
                Collections.sort(thingsList, new QueCMSC335(sortType));

                //for loop / grab all results relevent to data
                for (ThingCMSC335 newThing : thingsList) {
                    result += "> " + newThing.getName() + " (" + getField.invoke(newThing) + ")\n";
                }
            }
            //catching exceptions
        } catch (
            NoSuchMethodException |
            SecurityException |
            IllegalAccessException |
            IllegalArgumentException |
            InvocationTargetException ex
        ) {
            //printing error when exception caught
            System.out.println("ERROR: " + ex);
        }

      // formating the searches for earch area
        this.searchArea.append("Sort results for '" + sortTarget + " "
            + sortType.toLowerCase() + " in " + sortPort + "'\n" + result + "\n");
    }

    //nodes method
    private void nodes(String methodName) {

        //Variable declaration for nodes method
        Method toggle;
        //try catch
        try {
            //get integer type through use of toggle
            toggle = JTree.class.getDeclaredMethod(methodName, Integer.TYPE);
            //for loop as long at i is less than row count i++
            for (int i = 0; i < this.mainJTree.getRowCount(); i++) {
                //then invoke i to mainJTree
                toggle.invoke(this.mainJTree, i);
            }
            //catching exceptions
        } catch (NoSuchMethodException
                | SecurityException
                | IllegalAccessException
                | IllegalArgumentException
                | InvocationTargetException ex) {
            //printing exceptions caught
            System.out.println("ERROR: " + ex);
        }
    }

    
    //display details method
    private void displayDetails() {

        //if statement USER MUST BUILD WORLD
        if (this.world == null || this.scanIn == null) {
            this.displayErrorPopup("ERROR:NO WORLD BUILT. Please build the world again.");
            //retun the error
            return;
            //else if statement USER MUST SELECT ELEMENT
        } else if (this.mainJTree.getLastSelectedPathComponent() == null) {
            this.displayErrorPopup("ERROR:SELECT AN ELEMENT.");
            //return the error
            return;
            //esle if statement USER DID NOT SELECT PROPER NODE
        } else if (Arrays.asList(new String[]{"Que", "Docks", "Ships", "Persons", "World"})
                .contains(this.mainJTree.getLastSelectedPathComponent().toString())) {
            this.displayErrorPopup("ERROR: IMPROPER NODE SELECTION. SELECT ANOTHR NODE.");
            //return the error
            return;
        }

        //Variable declarations   
        //string select variable
        String selection;
        //table variable for JTable
        JTable table;
        //variables for hashmap
        HashMap<String, String> defVal, shipVal, pShipVal,
                cShipVal, perVal;
        //linked hashmap variables
        LinkedHashMap<String, String> Fields;
        //Object variable
        Object[][] objResult;
        //String array variables
        String[] colNames, nameArray;
        //int data type key variable for counting
        int keyCount;

        //Variable definitions
        //get last node to string
        selection = this.mainJTree.getLastSelectedPathComponent().toString();
        //split selection string into substrings
        nameArray = selection.split(" ");
        //eliminates leading and trailing spaces
        selection = nameArray[0].trim();
        //creating linked hashmap
        Fields = new LinkedHashMap<>();
        //String array for column value names
        colNames = new String[]{"Field", "Value"};
        //start of key count
        keyCount = 0;

        //These are default values for the hashmap string
        defVal = new HashMap<String, String>() {
            {
                //ID number and Index
                // insert a key / values into map
                put("Number ID", "getIndex");
                // insert a key / values into map
                //Name for hashmap string
                put("Name", "getName");
            }
        };

        //These are the ship values for different parameters of the ship
        shipVal = new HashMap<String, String>() {
            {
                //for ships weight
                // insert a key / values into map
                put("totalWeight", "gettotalWeight");
                //for hull length
                // insert a key / values into map
                put("hullLength", "gethullLength");
                // for hull width
                // insert a key / values into map
                put("hullWidth", "gethullWidth");
                //for depth of draft
                // insert a key / values into map
                put("depthDraft", "getdepthDraft");
            }
        };

        //These are values for the passenger ships
        pShipVal = new HashMap<String, String>() {
            {
                //rooms
                // insert a key / values into map
                put("Total rooms", "getNumberOfRooms");
                //occupied
                // insert a key / values into map
                put("Occupied rooms", "getNumberOfOccupiedRooms");
                //passengers
                // insert a key / values into map
                put("Passengers", "getNumberOfPassengers");
            }
        };

        //These are the cargo ship values
        cShipVal = new HashMap<String, String>() {
            {
                //volume value
                // insert a key / values into map
                put("Cargo volume", "getCargoVolume");
                //cargo value
                // insert a key / values into map
                put("Cargo value", "getCargoValue");
                //weight value
                // insert a key / values into map
                put("Cargo weight", "getCargoWeight");
            }
        };

        //These are the person values
        perVal = new HashMap<String, String>() {
            {
                //skill value
                // insert a key / values into map
                put("Occupation", "getSkill");
            }
        };

        //For loop to get all things from each class
        for (ThingCMSC335 newThing : this.world.getAllThings()) {
            //if statement to get name equal to selection variable
            if (newThing.getName().equals(selection)) {
                //default value from thing class
                //copies all of the elements
                Fields.putAll(this.construct(newThing, ThingCMSC335.class,
                        defVal));
                //if statement to get instance of ship equal with shipval
                if (newThing instanceof ShipCMSC335) {
                    //shipVal from ship class
                    //copies all of the elements
                    Fields.putAll(this.construct(newThing, ShipCMSC335.class,
                            shipVal));
                    //if statement to get instance of passneger ship with pShipVal
                    if (newThing instanceof PassengerShipCMSC335) {
                        //pShipVal from passenger ship class
                        //copies all of the elements
                        Fields.putAll(this.construct(newThing, PassengerShipCMSC335.class,
                                pShipVal));
                        //else if statement to get instance of cargo ship with cShipVal
                        //copies all of the elements
                    } else if (newThing instanceof CargoShipCMSC335) {
                        //cShipVal from cargo ship class
                        //copies all of the elements
                        Fields.putAll(this.construct(newThing, CargoShipCMSC335.class,
                                cShipVal));
                    }
                    //else if statement to get instance of person equal with perVal
                } else if (newThing instanceof PersonCMSC335) {
                    //perVal from person class
                    //copies all of the elements
                    Fields.putAll(this.construct(newThing, PersonCMSC335.class,
                            perVal));
                }
            }
        }

        //get size of map ---> key value
        objResult = new Object[Fields.size()][2];
        //for loop hashmap string / return set containing map entry values
        for (HashMap.Entry<String, String> entry : Fields.entrySet()) {
            //get key value from entry set
            objResult[keyCount][0] = entry.getKey();
            //get key value form entry set
            objResult[keyCount][1] = entry.getValue();
            //count the key value
            keyCount++;
        }

        //Creates the JTable based on results
        table = new JTable(objResult, colNames);
        //sets the size of the viewable scroll text area
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        //sets the height of the fills view ports text area
        table.setFillsViewportHeight(true);

        //This is to display the JTable
        JOptionPane.showMessageDialog(this.mainFrame, new JScrollPane(table), selection,
                //plain for optionpane
                JOptionPane.PLAIN_MESSAGE);
    }

    //contruct method for hashmap
    private <T extends ThingCMSC335> HashMap<String, String> construct(T newThing,
            Class className, HashMap<String, String> values) {

        //Variable declarations for hashmap
        HashMap<String, String> resMap;
        Method attribute;

        //Definition for resMap variable
        resMap = new HashMap<>();
        //Try Catch
        try {
            //for loop hashmap string / return set containing map entry values
            for (HashMap.Entry<String, String> row : values.entrySet()) {

                //Variable Declarations
                String dispText, methName, methRes;
                Object attributeRes;

                //Variable Definitions
                //get the key
                dispText = row.getKey();
                //get the value
                methName = row.getValue();

                // Method related definitions and invocations
                //get the metho dname
                attribute = className.getDeclaredMethod(methName);
                //invoke newThing
                attributeRes = attribute.invoke(newThing);

                ///if statement / if result is instance of String
                if (attributeRes instanceof String) {
                    //the method result is to be equal to attribute result
                    methRes = (String) attributeRes;
                    //else statement the string must be the value of the result
                } else {
                    //value fo result
                    methRes = String.valueOf(attributeRes);
                }
                // put results map / insert a key / values into map
                resMap.put(dispText, methRes);
            }
            //catch exceptions
        } catch (NoSuchMethodException
                | SecurityException
                | IllegalAccessException
                | IllegalArgumentException
                | InvocationTargetException ex) {
            //print exceptions as caught
            System.out.println("ERROR: " + ex);
        }
        //return the results of the map
        return resMap;
    }

    //jobs method
    private void Jobs() {
        //for loop get ports
        for (SeaPortCMSC335 port : this.world.getPorts()) {
            //for loop get docks form port
            for (DockCMSC335 dock : port.getDocks()) {
                //if statement for get ship, get jobs / if dock ship has no job
                if (dock.getShip().getJobs().isEmpty()) {
                    //append the status area to re-launch hsip / get ship and name
                    this.statusArea.append("re-launch ship" + dock.getShip().getName()
                            //from the dock in the port
                            + " from " + dock.getName() + " in " + port.getName() + "\n");
                    //set the next ship
                    dock.setShip(null);

                    //while loop to get que while que is empty
                    while (!port.getQue().isEmpty()) {
                        //while a ship is waiting pll in a new ship
                        ShipCMSC335 newShip = port.getQue().remove(0);
                        //if statement to get jobs if is empty
                        if (!newShip.getJobs().isEmpty()) {
                            //set a new ship at the dock
                            dock.setShip(newShip);
                            //append the status area / ships is parked / get ship / get name / at dock / in port
                            this.statusArea.append("Ship is parked" + dock.getShip().getName()
                                    //the ship is at a dock in the port
                                    + " at " + dock.getName() + " in " + port.getName() + "\n");
                            break;
                        }
                    }
                }

                //get ship and set to dock
                //setter for processing ships
                dock.getShip().setDock(dock);
            }

            //collected method returns a set and reduce method via filter
            port.getShips().stream().filter((ship) -> (!ship.getJobs().isEmpty())).forEachOrdered((ship) -> {
                //for loop get the jobs if jobs
                for (JobCMSC335 job : ship.getJobs()) {
                    //add the job to panel
                    this.jobsScroll.add(job.getJobAsPanel());
                    //recalculate lay out
                    this.jobsScroll.revalidate();
                    //change visible property of component
                    this.jobsScroll.repaint();
                    //set the status to status area
                    job.setStatusLog(this.statusArea);
                    //set the worker log to jobs area
                    job.setWorkerLog(this.jobsArea);
                    //begin thread with jobs
                    job.startJob();
                }
            });
        }
    }

    //clear jobs method
    private void clearJobs() {
        //remove the job panels
        this.jobsScroll.removeAll();
        //get ports, get ships, get jobs
        this.world.getAllThings().forEach((thing) -> {
            //if statement gte only jobs
            if (thing instanceof JobCMSC335) {
                // set end of job to true
                ((JobCMSC335) thing).endJob();
            }
        });
    }

    //displayerrorpopup method
    private void displayErrorPopup(String message) {
        //Display that error
        JOptionPane.showMessageDialog(this.mainFrame, message, "ERROR", JOptionPane.ERROR_MESSAGE);
    }

   //main method Yo!!
    public static void main(String[] args) {
        SeaPortsProgramCMSC335 newCollection = new SeaPortsProgramCMSC335();
        //construct that GUI
        newCollection.constructGUI();
    }

}
